///////////////////////////////////////////////////////////////////////////////
//
struct vector
{
    float x;
    float y;
    float z;
    float w;
};
//
///////////////////////////////////////////////////////////////////////////////
//
void
vector_print(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// set a vector from x, y, z, w
//
void
vector_set(struct vector *v, float x, float y, float z, float w);
//
///////////////////////////////////////////////////////////////////////////////
//
// initialize vector with zeros
//
void
vector(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// the provided angle should be in degrees
//
void
vector_from_axis_angle(struct vector *v, struct vector *axis);
//
///////////////////////////////////////////////////////////////////////////////
//
// calculate a vector's magnitude/length/euclidean distance
//
float
vector_magnitude(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// normalize the components of a vector to length 1
//
void
vector_normalize(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// negate a vector
//
void
vector_involve(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// invert a vector -> negate and then normalize
//
void
vector_inverse(struct vector *v);
//
///////////////////////////////////////////////////////////////////////////////
//
// clone vector b from vector a
//
void
vector_clone(struct vector *a, struct vector *b);
//
///////////////////////////////////////////////////////////////////////////////
//
// multiply two vectors
//
void
vector_multiply(struct vector *a, struct vector *b);
//
///////////////////////////////////////////////////////////////////////////////
//
// conjugate two vectors
//
void
vector_conjugate(struct vector *a, struct vector *b);
//
///////////////////////////////////////////////////////////////////////////////
